/******************************************************
 * Copyright: Rinka Singh/Melt Iron
 * histo_balance.tdd
 ******************************************************/

Code will be test driven development enabled.
We will have TCs for most functions.

d_Sorted

static void mv_chunk_left (token *scratchpad, const unsigned int mv_start, const unsigned int mv_end);

static void cp_from_scratchpad_to_1histo (token_tracking *hs, token *scr, unsigned int len, const unsigned int scr_free);

static void copy_1histo_to_scratchpad (token *scr, unsigned int *h_free, unsigned int *d_free, token_tracking *hst);

static unsigned int copy_2tok_into_scratchpad (token *scr, unsigned int *dscr_free, token_tracking *curr, token_tracking *next);

token_tracking *sort_merge_histo_cross (dim3 grid, dim3 block,
token_tracking *hist, unsigned int *d_wds);

Assumption: NULL histo is impossible...
1.1		Tmp has value, nxt = 0 - just one histo - Done
1.2		tmp + nxt has value - 2 histo
			tmp - val, nxt - val
			tmp - 0, nxt - val
			tmp - val, nxt - 0
			tmp - 0, nxt - 0
			hist = setup_tst_hist_sort_merge_histo_cross (hist, NULL);
			#define ONE_ONE_ONE			1
			#define ONE_ONE_TWO			2
			#define ONE_ONE_THREE		3
			#define ONE_ONE_FOUR		4

	1.2.1	tmp has 0 vals and exists + nxt has vals
	1.2.2	tmp has vals and nxt has 0 vals and exists
1.3		3 histo
	1.3.1	all have value
	1.3.2	first has zero val & exists
	1.3.3	mid has zero val & exists
	1.3.4	last has zero val and exists
	1.3.5	all three have zero val and exist.
			#define ONE_TWO_ONE			5
			#define ONE_TWO_TWO			6
			#define ONE_TWO_THREE		7
			#define ONE_TWO_FOUR		8
			#define ONE_TWO_FIVE		9

1.4	during compression one or more scratchpad < CHUNK_SIZE